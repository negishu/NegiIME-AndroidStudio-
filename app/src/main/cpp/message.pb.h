// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace negi {
namespace android {
namespace NDK {
namespace SET {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class CANDS;
class CANDS_CAND;
class INPUTS;
class INPUTS_INPUT;

enum CANDS_TYPE {
  CANDS_TYPE_EXACT = 0,
  CANDS_TYPE_AMBIG = 1,
  CANDS_TYPE_AUTOCMP = 2,
  CANDS_TYPE_SPELL = 3
};
bool CANDS_TYPE_IsValid(int value);
const CANDS_TYPE CANDS_TYPE_TYPE_MIN = CANDS_TYPE_EXACT;
const CANDS_TYPE CANDS_TYPE_TYPE_MAX = CANDS_TYPE_SPELL;
const int CANDS_TYPE_TYPE_ARRAYSIZE = CANDS_TYPE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* CANDS_TYPE_descriptor();
inline const ::std::string& CANDS_TYPE_Name(CANDS_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    CANDS_TYPE_descriptor(), value);
}
inline bool CANDS_TYPE_Parse(
    const ::std::string& name, CANDS_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CANDS_TYPE>(
    CANDS_TYPE_descriptor(), name, value);
}
enum INPUTS_TYPE {
  INPUTS_TYPE_TAP = 0,
  INPUTS_TYPE_TRACE = 1
};
bool INPUTS_TYPE_IsValid(int value);
const INPUTS_TYPE INPUTS_TYPE_TYPE_MIN = INPUTS_TYPE_TAP;
const INPUTS_TYPE INPUTS_TYPE_TYPE_MAX = INPUTS_TYPE_TRACE;
const int INPUTS_TYPE_TYPE_ARRAYSIZE = INPUTS_TYPE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* INPUTS_TYPE_descriptor();
inline const ::std::string& INPUTS_TYPE_Name(INPUTS_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    INPUTS_TYPE_descriptor(), value);
}
inline bool INPUTS_TYPE_Parse(
    const ::std::string& name, INPUTS_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<INPUTS_TYPE>(
    INPUTS_TYPE_descriptor(), name, value);
}
// ===================================================================

class CANDS_CAND : public ::google::protobuf::Message {
 public:
  CANDS_CAND();
  virtual ~CANDS_CAND();

  CANDS_CAND(const CANDS_CAND& from);

  inline CANDS_CAND& operator=(const CANDS_CAND& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CANDS_CAND& default_instance();

  void Swap(CANDS_CAND* other);

  // implements Message ----------------------------------------------

  CANDS_CAND* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CANDS_CAND& from);
  void MergeFrom(const CANDS_CAND& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string context = 1;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 1;
  inline const ::std::string& context() const;
  inline void set_context(const ::std::string& value);
  inline void set_context(const char* value);
  inline void set_context(const char* value, size_t size);
  inline ::std::string* mutable_context();
  inline ::std::string* release_context();
  inline void set_allocated_context(::std::string* context);

  // optional .negi.android.NDK.SET.CANDS.TYPE type = 2 [default = AMBIG];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::negi::android::NDK::SET::CANDS_TYPE type() const;
  inline void set_type(::negi::android::NDK::SET::CANDS_TYPE value);

  // @@protoc_insertion_point(class_scope:negi.android.NDK.SET.CANDS.CAND)
 private:
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* context_;
  int type_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static CANDS_CAND* default_instance_;
};
// -------------------------------------------------------------------

class CANDS : public ::google::protobuf::Message {
 public:
  CANDS();
  virtual ~CANDS();

  CANDS(const CANDS& from);

  inline CANDS& operator=(const CANDS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CANDS& default_instance();

  void Swap(CANDS* other);

  // implements Message ----------------------------------------------

  CANDS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CANDS& from);
  void MergeFrom(const CANDS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CANDS_CAND CAND;

  typedef CANDS_TYPE TYPE;
  static const TYPE EXACT = CANDS_TYPE_EXACT;
  static const TYPE AMBIG = CANDS_TYPE_AMBIG;
  static const TYPE AUTOCMP = CANDS_TYPE_AUTOCMP;
  static const TYPE SPELL = CANDS_TYPE_SPELL;
  static inline bool TYPE_IsValid(int value) {
    return CANDS_TYPE_IsValid(value);
  }
  static const TYPE TYPE_MIN =
    CANDS_TYPE_TYPE_MIN;
  static const TYPE TYPE_MAX =
    CANDS_TYPE_TYPE_MAX;
  static const int TYPE_ARRAYSIZE =
    CANDS_TYPE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TYPE_descriptor() {
    return CANDS_TYPE_descriptor();
  }
  static inline const ::std::string& TYPE_Name(TYPE value) {
    return CANDS_TYPE_Name(value);
  }
  static inline bool TYPE_Parse(const ::std::string& name,
      TYPE* value) {
    return CANDS_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .negi.android.NDK.SET.CANDS.CAND candidate = 1;
  inline int candidate_size() const;
  inline void clear_candidate();
  static const int kCandidateFieldNumber = 1;
  inline const ::negi::android::NDK::SET::CANDS_CAND& candidate(int index) const;
  inline ::negi::android::NDK::SET::CANDS_CAND* mutable_candidate(int index);
  inline ::negi::android::NDK::SET::CANDS_CAND* add_candidate();
  inline const ::google::protobuf::RepeatedPtrField< ::negi::android::NDK::SET::CANDS_CAND >&
      candidate() const;
  inline ::google::protobuf::RepeatedPtrField< ::negi::android::NDK::SET::CANDS_CAND >*
      mutable_candidate();

  // @@protoc_insertion_point(class_scope:negi.android.NDK.SET.CANDS)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::negi::android::NDK::SET::CANDS_CAND > candidate_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static CANDS* default_instance_;
};
// -------------------------------------------------------------------

class INPUTS_INPUT : public ::google::protobuf::Message {
 public:
  INPUTS_INPUT();
  virtual ~INPUTS_INPUT();

  INPUTS_INPUT(const INPUTS_INPUT& from);

  inline INPUTS_INPUT& operator=(const INPUTS_INPUT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const INPUTS_INPUT& default_instance();

  void Swap(INPUTS_INPUT* other);

  // implements Message ----------------------------------------------

  INPUTS_INPUT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const INPUTS_INPUT& from);
  void MergeFrom(const INPUTS_INPUT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .negi.android.NDK.SET.INPUTS.TYPE type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::negi::android::NDK::SET::INPUTS_TYPE type() const;
  inline void set_type(::negi::android::NDK::SET::INPUTS_TYPE value);

  // required int32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:negi.android.NDK.SET.INPUTS.INPUT)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static INPUTS_INPUT* default_instance_;
};
// -------------------------------------------------------------------

class INPUTS : public ::google::protobuf::Message {
 public:
  INPUTS();
  virtual ~INPUTS();

  INPUTS(const INPUTS& from);

  inline INPUTS& operator=(const INPUTS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const INPUTS& default_instance();

  void Swap(INPUTS* other);

  // implements Message ----------------------------------------------

  INPUTS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const INPUTS& from);
  void MergeFrom(const INPUTS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef INPUTS_INPUT INPUT;

  typedef INPUTS_TYPE TYPE;
  static const TYPE TAP = INPUTS_TYPE_TAP;
  static const TYPE TRACE = INPUTS_TYPE_TRACE;
  static inline bool TYPE_IsValid(int value) {
    return INPUTS_TYPE_IsValid(value);
  }
  static const TYPE TYPE_MIN =
    INPUTS_TYPE_TYPE_MIN;
  static const TYPE TYPE_MAX =
    INPUTS_TYPE_TYPE_MAX;
  static const int TYPE_ARRAYSIZE =
    INPUTS_TYPE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TYPE_descriptor() {
    return INPUTS_TYPE_descriptor();
  }
  static inline const ::std::string& TYPE_Name(TYPE value) {
    return INPUTS_TYPE_Name(value);
  }
  static inline bool TYPE_Parse(const ::std::string& name,
      TYPE* value) {
    return INPUTS_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .negi.android.NDK.SET.INPUTS.INPUT input = 1;
  inline int input_size() const;
  inline void clear_input();
  static const int kInputFieldNumber = 1;
  inline const ::negi::android::NDK::SET::INPUTS_INPUT& input(int index) const;
  inline ::negi::android::NDK::SET::INPUTS_INPUT* mutable_input(int index);
  inline ::negi::android::NDK::SET::INPUTS_INPUT* add_input();
  inline const ::google::protobuf::RepeatedPtrField< ::negi::android::NDK::SET::INPUTS_INPUT >&
      input() const;
  inline ::google::protobuf::RepeatedPtrField< ::negi::android::NDK::SET::INPUTS_INPUT >*
      mutable_input();

  // @@protoc_insertion_point(class_scope:negi.android.NDK.SET.INPUTS)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::negi::android::NDK::SET::INPUTS_INPUT > input_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static INPUTS* default_instance_;
};
// ===================================================================


// ===================================================================

// CANDS_CAND

// required string context = 1;
inline bool CANDS_CAND::has_context() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CANDS_CAND::set_has_context() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CANDS_CAND::clear_has_context() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CANDS_CAND::clear_context() {
  if (context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    context_->clear();
  }
  clear_has_context();
}
inline const ::std::string& CANDS_CAND::context() const {
  // @@protoc_insertion_point(field_get:negi.android.NDK.SET.CANDS.CAND.context)
  return *context_;
}
inline void CANDS_CAND::set_context(const ::std::string& value) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    context_ = new ::std::string;
  }
  context_->assign(value);
  // @@protoc_insertion_point(field_set:negi.android.NDK.SET.CANDS.CAND.context)
}
inline void CANDS_CAND::set_context(const char* value) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    context_ = new ::std::string;
  }
  context_->assign(value);
  // @@protoc_insertion_point(field_set_char:negi.android.NDK.SET.CANDS.CAND.context)
}
inline void CANDS_CAND::set_context(const char* value, size_t size) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    context_ = new ::std::string;
  }
  context_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:negi.android.NDK.SET.CANDS.CAND.context)
}
inline ::std::string* CANDS_CAND::mutable_context() {
  set_has_context();
  if (context_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    context_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:negi.android.NDK.SET.CANDS.CAND.context)
  return context_;
}
inline ::std::string* CANDS_CAND::release_context() {
  clear_has_context();
  if (context_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = context_;
    context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CANDS_CAND::set_allocated_context(::std::string* context) {
  if (context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete context_;
  }
  if (context) {
    set_has_context();
    context_ = context;
  } else {
    clear_has_context();
    context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:negi.android.NDK.SET.CANDS.CAND.context)
}

// optional .negi.android.NDK.SET.CANDS.TYPE type = 2 [default = AMBIG];
inline bool CANDS_CAND::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CANDS_CAND::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CANDS_CAND::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CANDS_CAND::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::negi::android::NDK::SET::CANDS_TYPE CANDS_CAND::type() const {
  // @@protoc_insertion_point(field_get:negi.android.NDK.SET.CANDS.CAND.type)
  return static_cast< ::negi::android::NDK::SET::CANDS_TYPE >(type_);
}
inline void CANDS_CAND::set_type(::negi::android::NDK::SET::CANDS_TYPE value) {
  assert(::negi::android::NDK::SET::CANDS_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:negi.android.NDK.SET.CANDS.CAND.type)
}

// -------------------------------------------------------------------

// CANDS

// repeated .negi.android.NDK.SET.CANDS.CAND candidate = 1;
inline int CANDS::candidate_size() const {
  return candidate_.size();
}
inline void CANDS::clear_candidate() {
  candidate_.Clear();
}
inline const ::negi::android::NDK::SET::CANDS_CAND& CANDS::candidate(int index) const {
  // @@protoc_insertion_point(field_get:negi.android.NDK.SET.CANDS.candidate)
  return candidate_.Get(index);
}
inline ::negi::android::NDK::SET::CANDS_CAND* CANDS::mutable_candidate(int index) {
  // @@protoc_insertion_point(field_mutable:negi.android.NDK.SET.CANDS.candidate)
  return candidate_.Mutable(index);
}
inline ::negi::android::NDK::SET::CANDS_CAND* CANDS::add_candidate() {
  // @@protoc_insertion_point(field_add:negi.android.NDK.SET.CANDS.candidate)
  return candidate_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::negi::android::NDK::SET::CANDS_CAND >&
CANDS::candidate() const {
  // @@protoc_insertion_point(field_list:negi.android.NDK.SET.CANDS.candidate)
  return candidate_;
}
inline ::google::protobuf::RepeatedPtrField< ::negi::android::NDK::SET::CANDS_CAND >*
CANDS::mutable_candidate() {
  // @@protoc_insertion_point(field_mutable_list:negi.android.NDK.SET.CANDS.candidate)
  return &candidate_;
}

// -------------------------------------------------------------------

// INPUTS_INPUT

// required .negi.android.NDK.SET.INPUTS.TYPE type = 1;
inline bool INPUTS_INPUT::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void INPUTS_INPUT::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void INPUTS_INPUT::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void INPUTS_INPUT::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::negi::android::NDK::SET::INPUTS_TYPE INPUTS_INPUT::type() const {
  // @@protoc_insertion_point(field_get:negi.android.NDK.SET.INPUTS.INPUT.type)
  return static_cast< ::negi::android::NDK::SET::INPUTS_TYPE >(type_);
}
inline void INPUTS_INPUT::set_type(::negi::android::NDK::SET::INPUTS_TYPE value) {
  assert(::negi::android::NDK::SET::INPUTS_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:negi.android.NDK.SET.INPUTS.INPUT.type)
}

// required int32 x = 2;
inline bool INPUTS_INPUT::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void INPUTS_INPUT::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void INPUTS_INPUT::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void INPUTS_INPUT::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 INPUTS_INPUT::x() const {
  // @@protoc_insertion_point(field_get:negi.android.NDK.SET.INPUTS.INPUT.x)
  return x_;
}
inline void INPUTS_INPUT::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:negi.android.NDK.SET.INPUTS.INPUT.x)
}

// required int32 y = 3;
inline bool INPUTS_INPUT::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void INPUTS_INPUT::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void INPUTS_INPUT::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void INPUTS_INPUT::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 INPUTS_INPUT::y() const {
  // @@protoc_insertion_point(field_get:negi.android.NDK.SET.INPUTS.INPUT.y)
  return y_;
}
inline void INPUTS_INPUT::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:negi.android.NDK.SET.INPUTS.INPUT.y)
}

// -------------------------------------------------------------------

// INPUTS

// repeated .negi.android.NDK.SET.INPUTS.INPUT input = 1;
inline int INPUTS::input_size() const {
  return input_.size();
}
inline void INPUTS::clear_input() {
  input_.Clear();
}
inline const ::negi::android::NDK::SET::INPUTS_INPUT& INPUTS::input(int index) const {
  // @@protoc_insertion_point(field_get:negi.android.NDK.SET.INPUTS.input)
  return input_.Get(index);
}
inline ::negi::android::NDK::SET::INPUTS_INPUT* INPUTS::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:negi.android.NDK.SET.INPUTS.input)
  return input_.Mutable(index);
}
inline ::negi::android::NDK::SET::INPUTS_INPUT* INPUTS::add_input() {
  // @@protoc_insertion_point(field_add:negi.android.NDK.SET.INPUTS.input)
  return input_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::negi::android::NDK::SET::INPUTS_INPUT >&
INPUTS::input() const {
  // @@protoc_insertion_point(field_list:negi.android.NDK.SET.INPUTS.input)
  return input_;
}
inline ::google::protobuf::RepeatedPtrField< ::negi::android::NDK::SET::INPUTS_INPUT >*
INPUTS::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:negi.android.NDK.SET.INPUTS.input)
  return &input_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SET
}  // namespace NDK
}  // namespace android
}  // namespace negi

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::negi::android::NDK::SET::CANDS_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::negi::android::NDK::SET::CANDS_TYPE>() {
  return ::negi::android::NDK::SET::CANDS_TYPE_descriptor();
}
template <> struct is_proto_enum< ::negi::android::NDK::SET::INPUTS_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::negi::android::NDK::SET::INPUTS_TYPE>() {
  return ::negi::android::NDK::SET::INPUTS_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
