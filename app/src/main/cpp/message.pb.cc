// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace negi {
namespace android {
namespace NDK {
namespace SET {

namespace {

const ::google::protobuf::Descriptor* CANDS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CANDS_reflection_ = NULL;
const ::google::protobuf::Descriptor* CANDS_CAND_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CANDS_CAND_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CANDS_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* INPUTS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  INPUTS_reflection_ = NULL;
const ::google::protobuf::Descriptor* INPUTS_INPUT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  INPUTS_INPUT_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* INPUTS_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  CANDS_descriptor_ = file->message_type(0);
  static const int CANDS_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANDS, candidate_),
  };
  CANDS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CANDS_descriptor_,
      CANDS::default_instance_,
      CANDS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANDS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANDS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CANDS));
  CANDS_CAND_descriptor_ = CANDS_descriptor_->nested_type(0);
  static const int CANDS_CAND_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANDS_CAND, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANDS_CAND, type_),
  };
  CANDS_CAND_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CANDS_CAND_descriptor_,
      CANDS_CAND::default_instance_,
      CANDS_CAND_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANDS_CAND, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANDS_CAND, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CANDS_CAND));
  CANDS_TYPE_descriptor_ = CANDS_descriptor_->enum_type(0);
  INPUTS_descriptor_ = file->message_type(1);
  static const int INPUTS_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INPUTS, input_),
  };
  INPUTS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      INPUTS_descriptor_,
      INPUTS::default_instance_,
      INPUTS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INPUTS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INPUTS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(INPUTS));
  INPUTS_INPUT_descriptor_ = INPUTS_descriptor_->nested_type(0);
  static const int INPUTS_INPUT_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INPUTS_INPUT, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INPUTS_INPUT, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INPUTS_INPUT, y_),
  };
  INPUTS_INPUT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      INPUTS_INPUT_descriptor_,
      INPUTS_INPUT::default_instance_,
      INPUTS_INPUT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INPUTS_INPUT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INPUTS_INPUT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(INPUTS_INPUT));
  INPUTS_TYPE_descriptor_ = INPUTS_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CANDS_descriptor_, &CANDS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CANDS_CAND_descriptor_, &CANDS_CAND::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    INPUTS_descriptor_, &INPUTS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    INPUTS_INPUT_descriptor_, &INPUTS_INPUT::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete CANDS::default_instance_;
  delete CANDS_reflection_;
  delete CANDS_CAND::default_instance_;
  delete CANDS_CAND_reflection_;
  delete INPUTS::default_instance_;
  delete INPUTS_reflection_;
  delete INPUTS_INPUT::default_instance_;
  delete INPUTS_INPUT_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\024negi.android.NDK.SET\"\302\001"
    "\n\005CANDS\0223\n\tcandidate\030\001 \003(\0132 .negi.androi"
    "d.NDK.SET.CANDS.CAND\032N\n\004CAND\022\017\n\007context\030"
    "\001 \002(\t\0225\n\004type\030\002 \001(\0162 .negi.android.NDK.S"
    "ET.CANDS.TYPE:\005AMBIG\"4\n\004TYPE\022\t\n\005EXACT\020\000\022"
    "\t\n\005AMBIG\020\001\022\013\n\007AUTOCMP\020\002\022\t\n\005SPELL\020\003\"\247\001\n\006I"
    "NPUTS\0221\n\005input\030\001 \003(\0132\".negi.android.NDK."
    "SET.INPUTS.INPUT\032N\n\005INPUT\022/\n\004type\030\001 \002(\0162"
    "!.negi.android.NDK.SET.INPUTS.TYPE\022\t\n\001x\030"
    "\002 \002(\005\022\t\n\001y\030\003 \002(\005\"\032\n\004TYPE\022\007\n\003TAP\020\000\022\t\n\005TRA"
    "CE\020\001", 404);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  CANDS::default_instance_ = new CANDS();
  CANDS_CAND::default_instance_ = new CANDS_CAND();
  INPUTS::default_instance_ = new INPUTS();
  INPUTS_INPUT::default_instance_ = new INPUTS_INPUT();
  CANDS::default_instance_->InitAsDefaultInstance();
  CANDS_CAND::default_instance_->InitAsDefaultInstance();
  INPUTS::default_instance_->InitAsDefaultInstance();
  INPUTS_INPUT::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* CANDS_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CANDS_TYPE_descriptor_;
}
bool CANDS_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CANDS_TYPE CANDS::EXACT;
const CANDS_TYPE CANDS::AMBIG;
const CANDS_TYPE CANDS::AUTOCMP;
const CANDS_TYPE CANDS::SPELL;
const CANDS_TYPE CANDS::TYPE_MIN;
const CANDS_TYPE CANDS::TYPE_MAX;
const int CANDS::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CANDS_CAND::kContextFieldNumber;
const int CANDS_CAND::kTypeFieldNumber;
#endif  // !_MSC_VER

CANDS_CAND::CANDS_CAND()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:negi.android.NDK.SET.CANDS.CAND)
}

void CANDS_CAND::InitAsDefaultInstance() {
}

CANDS_CAND::CANDS_CAND(const CANDS_CAND& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:negi.android.NDK.SET.CANDS.CAND)
}

void CANDS_CAND::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CANDS_CAND::~CANDS_CAND() {
  // @@protoc_insertion_point(destructor:negi.android.NDK.SET.CANDS.CAND)
  SharedDtor();
}

void CANDS_CAND::SharedDtor() {
  if (context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete context_;
  }
  if (this != default_instance_) {
  }
}

void CANDS_CAND::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CANDS_CAND::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CANDS_CAND_descriptor_;
}

const CANDS_CAND& CANDS_CAND::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

CANDS_CAND* CANDS_CAND::default_instance_ = NULL;

CANDS_CAND* CANDS_CAND::New() const {
  return new CANDS_CAND;
}

void CANDS_CAND::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_context()) {
      if (context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        context_->clear();
      }
    }
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CANDS_CAND::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:negi.android.NDK.SET.CANDS.CAND)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_context()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->context().data(), this->context().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "context");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .negi.android.NDK.SET.CANDS.TYPE type = 2 [default = AMBIG];
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::negi::android::NDK::SET::CANDS_TYPE_IsValid(value)) {
            set_type(static_cast< ::negi::android::NDK::SET::CANDS_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:negi.android.NDK.SET.CANDS.CAND)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:negi.android.NDK.SET.CANDS.CAND)
  return false;
#undef DO_
}

void CANDS_CAND::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:negi.android.NDK.SET.CANDS.CAND)
  // required string context = 1;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "context");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->context(), output);
  }

  // optional .negi.android.NDK.SET.CANDS.TYPE type = 2 [default = AMBIG];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:negi.android.NDK.SET.CANDS.CAND)
}

::google::protobuf::uint8* CANDS_CAND::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:negi.android.NDK.SET.CANDS.CAND)
  // required string context = 1;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "context");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->context(), target);
  }

  // optional .negi.android.NDK.SET.CANDS.TYPE type = 2 [default = AMBIG];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:negi.android.NDK.SET.CANDS.CAND)
  return target;
}

int CANDS_CAND::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string context = 1;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->context());
    }

    // optional .negi.android.NDK.SET.CANDS.TYPE type = 2 [default = AMBIG];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CANDS_CAND::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CANDS_CAND* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CANDS_CAND*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CANDS_CAND::MergeFrom(const CANDS_CAND& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_context()) {
      set_context(from.context());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CANDS_CAND::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CANDS_CAND::CopyFrom(const CANDS_CAND& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CANDS_CAND::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CANDS_CAND::Swap(CANDS_CAND* other) {
  if (other != this) {
    std::swap(context_, other->context_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CANDS_CAND::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CANDS_CAND_descriptor_;
  metadata.reflection = CANDS_CAND_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CANDS::kCandidateFieldNumber;
#endif  // !_MSC_VER

CANDS::CANDS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:negi.android.NDK.SET.CANDS)
}

void CANDS::InitAsDefaultInstance() {
}

CANDS::CANDS(const CANDS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:negi.android.NDK.SET.CANDS)
}

void CANDS::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CANDS::~CANDS() {
  // @@protoc_insertion_point(destructor:negi.android.NDK.SET.CANDS)
  SharedDtor();
}

void CANDS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CANDS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CANDS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CANDS_descriptor_;
}

const CANDS& CANDS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

CANDS* CANDS::default_instance_ = NULL;

CANDS* CANDS::New() const {
  return new CANDS;
}

void CANDS::Clear() {
  candidate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CANDS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:negi.android.NDK.SET.CANDS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .negi.android.NDK.SET.CANDS.CAND candidate = 1;
      case 1: {
        if (tag == 10) {
         parse_candidate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_candidate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_candidate;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:negi.android.NDK.SET.CANDS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:negi.android.NDK.SET.CANDS)
  return false;
#undef DO_
}

void CANDS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:negi.android.NDK.SET.CANDS)
  // repeated .negi.android.NDK.SET.CANDS.CAND candidate = 1;
  for (int i = 0; i < this->candidate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->candidate(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:negi.android.NDK.SET.CANDS)
}

::google::protobuf::uint8* CANDS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:negi.android.NDK.SET.CANDS)
  // repeated .negi.android.NDK.SET.CANDS.CAND candidate = 1;
  for (int i = 0; i < this->candidate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->candidate(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:negi.android.NDK.SET.CANDS)
  return target;
}

int CANDS::ByteSize() const {
  int total_size = 0;

  // repeated .negi.android.NDK.SET.CANDS.CAND candidate = 1;
  total_size += 1 * this->candidate_size();
  for (int i = 0; i < this->candidate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->candidate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CANDS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CANDS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CANDS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CANDS::MergeFrom(const CANDS& from) {
  GOOGLE_CHECK_NE(&from, this);
  candidate_.MergeFrom(from.candidate_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CANDS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CANDS::CopyFrom(const CANDS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CANDS::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->candidate())) return false;
  return true;
}

void CANDS::Swap(CANDS* other) {
  if (other != this) {
    candidate_.Swap(&other->candidate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CANDS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CANDS_descriptor_;
  metadata.reflection = CANDS_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* INPUTS_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return INPUTS_TYPE_descriptor_;
}
bool INPUTS_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const INPUTS_TYPE INPUTS::TAP;
const INPUTS_TYPE INPUTS::TRACE;
const INPUTS_TYPE INPUTS::TYPE_MIN;
const INPUTS_TYPE INPUTS::TYPE_MAX;
const int INPUTS::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int INPUTS_INPUT::kTypeFieldNumber;
const int INPUTS_INPUT::kXFieldNumber;
const int INPUTS_INPUT::kYFieldNumber;
#endif  // !_MSC_VER

INPUTS_INPUT::INPUTS_INPUT()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:negi.android.NDK.SET.INPUTS.INPUT)
}

void INPUTS_INPUT::InitAsDefaultInstance() {
}

INPUTS_INPUT::INPUTS_INPUT(const INPUTS_INPUT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:negi.android.NDK.SET.INPUTS.INPUT)
}

void INPUTS_INPUT::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

INPUTS_INPUT::~INPUTS_INPUT() {
  // @@protoc_insertion_point(destructor:negi.android.NDK.SET.INPUTS.INPUT)
  SharedDtor();
}

void INPUTS_INPUT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void INPUTS_INPUT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* INPUTS_INPUT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return INPUTS_INPUT_descriptor_;
}

const INPUTS_INPUT& INPUTS_INPUT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

INPUTS_INPUT* INPUTS_INPUT::default_instance_ = NULL;

INPUTS_INPUT* INPUTS_INPUT::New() const {
  return new INPUTS_INPUT;
}

void INPUTS_INPUT::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<INPUTS_INPUT*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool INPUTS_INPUT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:negi.android.NDK.SET.INPUTS.INPUT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .negi.android.NDK.SET.INPUTS.TYPE type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::negi::android::NDK::SET::INPUTS_TYPE_IsValid(value)) {
            set_type(static_cast< ::negi::android::NDK::SET::INPUTS_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required int32 x = 2;
      case 2: {
        if (tag == 16) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // required int32 y = 3;
      case 3: {
        if (tag == 24) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:negi.android.NDK.SET.INPUTS.INPUT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:negi.android.NDK.SET.INPUTS.INPUT)
  return false;
#undef DO_
}

void INPUTS_INPUT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:negi.android.NDK.SET.INPUTS.INPUT)
  // required .negi.android.NDK.SET.INPUTS.TYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // required int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:negi.android.NDK.SET.INPUTS.INPUT)
}

::google::protobuf::uint8* INPUTS_INPUT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:negi.android.NDK.SET.INPUTS.INPUT)
  // required .negi.android.NDK.SET.INPUTS.TYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // required int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:negi.android.NDK.SET.INPUTS.INPUT)
  return target;
}

int INPUTS_INPUT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .negi.android.NDK.SET.INPUTS.TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void INPUTS_INPUT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const INPUTS_INPUT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const INPUTS_INPUT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void INPUTS_INPUT::MergeFrom(const INPUTS_INPUT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void INPUTS_INPUT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void INPUTS_INPUT::CopyFrom(const INPUTS_INPUT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool INPUTS_INPUT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void INPUTS_INPUT::Swap(INPUTS_INPUT* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata INPUTS_INPUT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = INPUTS_INPUT_descriptor_;
  metadata.reflection = INPUTS_INPUT_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int INPUTS::kInputFieldNumber;
#endif  // !_MSC_VER

INPUTS::INPUTS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:negi.android.NDK.SET.INPUTS)
}

void INPUTS::InitAsDefaultInstance() {
}

INPUTS::INPUTS(const INPUTS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:negi.android.NDK.SET.INPUTS)
}

void INPUTS::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

INPUTS::~INPUTS() {
  // @@protoc_insertion_point(destructor:negi.android.NDK.SET.INPUTS)
  SharedDtor();
}

void INPUTS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void INPUTS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* INPUTS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return INPUTS_descriptor_;
}

const INPUTS& INPUTS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

INPUTS* INPUTS::default_instance_ = NULL;

INPUTS* INPUTS::New() const {
  return new INPUTS;
}

void INPUTS::Clear() {
  input_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool INPUTS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:negi.android.NDK.SET.INPUTS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .negi.android.NDK.SET.INPUTS.INPUT input = 1;
      case 1: {
        if (tag == 10) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_input()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_input;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:negi.android.NDK.SET.INPUTS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:negi.android.NDK.SET.INPUTS)
  return false;
#undef DO_
}

void INPUTS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:negi.android.NDK.SET.INPUTS)
  // repeated .negi.android.NDK.SET.INPUTS.INPUT input = 1;
  for (int i = 0; i < this->input_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->input(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:negi.android.NDK.SET.INPUTS)
}

::google::protobuf::uint8* INPUTS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:negi.android.NDK.SET.INPUTS)
  // repeated .negi.android.NDK.SET.INPUTS.INPUT input = 1;
  for (int i = 0; i < this->input_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->input(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:negi.android.NDK.SET.INPUTS)
  return target;
}

int INPUTS::ByteSize() const {
  int total_size = 0;

  // repeated .negi.android.NDK.SET.INPUTS.INPUT input = 1;
  total_size += 1 * this->input_size();
  for (int i = 0; i < this->input_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->input(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void INPUTS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const INPUTS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const INPUTS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void INPUTS::MergeFrom(const INPUTS& from) {
  GOOGLE_CHECK_NE(&from, this);
  input_.MergeFrom(from.input_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void INPUTS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void INPUTS::CopyFrom(const INPUTS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool INPUTS::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->input())) return false;
  return true;
}

void INPUTS::Swap(INPUTS* other) {
  if (other != this) {
    input_.Swap(&other->input_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata INPUTS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = INPUTS_descriptor_;
  metadata.reflection = INPUTS_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SET
}  // namespace NDK
}  // namespace android
}  // namespace negi

// @@protoc_insertion_point(global_scope)
